#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(__dir__, '..', 'lib')

require 'rubygems'
require 'bundler'
Bundler.setup :default

require 'gli'
require 'trema'
require 'sliceable_switch'

# slice command
module SliceApp
  extend GLI::App

  desc 'Creates a new virtual slice'
  arg_name 'name'
  command :add do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      fail 'slice name is required.' if args.empty?
      Trema.trema_process('RoutingSwitch', options[:socket_dir]).
        controller.
        slice.create(args.first)
    end
  end

  desc 'Deletes a virtual slice'
  arg_name 'name'
  command :delete do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      fail 'slice name is required.' if args.empty?
      Trema.trema_process('RoutingSwitch', options[:socket_dir]).
        controller.slice.destroy(args.first)
    end
  end

  desc 'Lists slices'
  command :list do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      DRb.start_service
      controller = Trema.trema_process('RoutingSwitch', options[:socket_dir]).controller
      controller.slice.all.each do |slice|
        puts slice
        slice.each do |port, mac_addresses|
          puts "  #{port.name}"
          mac_addresses.each do |each|
            puts "    #{each}"
          end
        end
      end
    end
  end

  desc 'Adds a port to a slice'
  command :add_port do |c|
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Port.parse(options[:port])
      slice = Trema.trema_process('RoutingSwitch', options[:socket_dir]).
              controller.slice.find_by!(name: options[:slice])
      slice.add_port(dpid: port[:dpid], port_no: port[:port_no])
    end
  end

  desc 'Deletes a port from a slice'
  command :delete_port do |c|
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Port.parse(options[:port])
      Trema.trema_process('RoutingSwitch', options[:socket_dir]).
        controller.
        slice.
        find_by!(name: options[:slice]).
        delete_port(dpid: port[:dpid], port_no: port[:port_no])
    end
  end

  desc 'Adds a host to a slice'
  command :add_host do |c|
    c.desc 'MAC address'
    c.flag [:m, :mac]
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--mac option is mandatory.' unless options[:mac]
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Port.parse(options[:port])
      Trema.trema_process('RoutingSwitch', options[:socket_dir]).
        controller.slice.
        find_by!(name: options[:slice]).
        add_mac_address(options[:mac],
                        dpid: port[:dpid], port_no: port[:port_no])
    end
  end

  desc 'Deletes a host from a slice'
  command :delete_host do |c|
    c.desc 'MAC address'
    c.flag [:m, :mac]
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--mac option is mandatory.' unless options[:mac]
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Port.parse(options[:port])
      Trema.trema_process('RoutingSwitch', options[:socket_dir]).
        controller.
        slice.
        find_by!(name: options[:slice]).
        delete_mac_address(options[:mac],
                           dpid: port[:dpid], port_no: port[:port_no])
    end
  end

  # by yyynishi
  desc 'Merge a slice into other slice'
  command :merge do |c|
    c.desc 'Source slice'
    c.flag [:s, :sslice]
    c.desc 'Target slice'
    c.flag [:t, :tslice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--source slice is mandatory.' unless options[:sslice]
      fail '--target slice is mandatory.' unless options[:tslice]

      Trema.trema_process('RoutingSwitch', options[:socket_dir]).
        controller.
        slice.
        merge(options[:sslice], options[:tslice])
    end
  end

  # by yyynishi @todo
  desc 'Split a slice into new slices'
  command :split do |c|
    c.desc 'Source slice'
    c.flag [:s, :sslice]
    c.desc 'Target slices'
    c.flag [:t, :tslices]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR
 
    c.action do |_global_options, options, _args|
      fail '--source slice is mandatory.' unless options[:sslice]
      fail '--target slices is mandatory.' unless options[:tslices]

      Trema.trema_process('RoutingSwitch', options[:socket_dir]).
        controller.
        slice.
        split(options[:sslice], options[:tslices])
    end
  end
    
  on_error do |e|
    fail e
  end

  exit run(ARGV)
end
